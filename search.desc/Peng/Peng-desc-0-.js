searchState.loadedDescShard("Peng", 0, "Quadrotor Simulation\nRepresents a camera in the simulation which is used to …\nCircular trajectory\nPlanner for circular trajectories\nHover at current position\nPlanner for hovering at a fixed position\nRepresents an Inertial Measurement Unit (IMU) with bias …\nLanding trajectory\nPlanner for landing maneuvers\nLissajous curve trajectory\nPlanner for Lissajous curve trajectories\nRepresents a maze in the simulation\nMinimum jerk trajectory along a straight line\nPlanner for minimum jerk trajectories along a straight line\nRepresents an obstacle in the simulation\nObstacle Avoidance Planner based on Potential field\nObstacle avoidance planner that uses a potential field …\nPID controller for quadrotor position and attitude control\nTrait defining the interface for trajectory planners\nManages different trajectory planners and switches between …\nEnum representing different types of trajectory planners\nRepresents a quadrotor with its physical properties and …\nA struct to hold trajectory data\nAccelerometer bias\nStandard deviation of accelerometer noise\nAdd a point to the trajectory if it is further than the …\nAmplitude of the Lissajous curve\nCurrent angular velocity of the quadrotor\nAngular velocity of the circular motion\nBias instability coefficient\nCenter of the Lissajous curve\nCenter of the circular trajectory\nComputes attitude control torques\nComputes position control thrust and desired orientation\nThe currently active planner\nInfluence distance of obstacles\nDrag coefficient\nDuration of the trajectory\nDuration of the trajectory\nDuration of the trajectory\nDuration of the landing maneuver\nDuration of the planner\nEnding position of the trajectory\nEnding yaw angle\nEnding yaw angle\nEnding yaw angle\nEnding yaw angle\nFrequency of the Lissajous curve\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the obstacles in the maze\nGravitational acceleration in m/s^2\nGyroscope bias\nStandard deviation of gyroscope noise\nInertia matrix of the quadrotor\nInverse of the inertia matrix\nAccumulated integral error for attitude\nAccumulated integral error for position\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the current trajectory is finished\nChecks if the current trajectory is finished\nAttractive force gain\nRepulsive force gain\nDerivative gain for attitude control\nDerivative gain for position control\nIntegral gain for attitude control\nIntegral gain for position control\nProportional gain for attitude control\nProportional gain for position control\nLogs simulation data to the rerun recording stream\nlog depth image data to the rerun recording stream\nLog the maze obstacles to the rerun recording stream\nLog the maze tube to the rerun recording stream\nlog mesh data to the rerun recording stream\nlog trajectory data to the rerun recording stream\nMain function to run the quadrotor simulation\nMass of the quadrotor in kg\nMaximum allowed integral error for attitude\nMaximum allowed integral error for position\nCreates a new Quadrotor with default parameters\nCreates a new IMU with default parameters\nCreates a new PIDController with default gains\nCreates a new PlannerManager with an initial hover planner\nCreates a new maze with the given bounds and number of …\nCreates a new camera with the given resolution, field of …\nList of obstacles\nCurrent orientation of the quadrotor\nPhase of the Lissajous curve\nPlans the trajectory based on the current state and time\nPlans the trajectory based on the current planner type\nCurrent position of the quadrotor in 3D space\nRadius of the circular trajectory\nRamp-up time for smooth transitions\nRamp-up time for smooth transitions\nCasts a ray from the camera origin in the given direction\nSimulates IMU readings with added bias and noise\nSimulates IMU readings with added noise\nRenders the depth of the scene from the perspective of the …\nSets a new planner\nStarting position of the trajectory\nStarting position of the trajectory\nStarting position of the trajectory\nStarting position of the landing maneuver\nStart time of the trajectory\nStart time of the trajectory\nStart time of the trajectory\nStart time of the landing maneuver\nStart time of the planner\nStarting yaw angle\nStarting yaw angle\nStarting yaw angle\nStarting yaw angle\nStarting yaw angle\nTarget position for hovering\nTarget position of the planner\nTarget yaw angle for hovering\nSimulation time step in seconds\nUpdates the IMU biases over time\nUpdates the current planner and returns the desired …\nUpdates the quadrotor’s dynamics with control inputs\nUpdates the obstacles in the maze, if an obstacle hits a …\nUpdates the planner based on the current simulation step\nCurrent velocity of the quadrotor")